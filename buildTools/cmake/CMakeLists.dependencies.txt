# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved

set (ION_TS_EXTERNAL "${PROJECT_SOURCE_DIR}/../external/")
#set (ION_TS_EXTERNAL "${CMAKE_BINARY_DIR}/external/")

#set(ION_UPDATE_SERVER "updates.iontorrent.com") # internal developer can use just "updates"

# Use the closest ION_UPDATE_SERVER we can find.
message(STATUS "Searching for an ION_UPDATE_SERVER...")
foreach ( SERVER updates updates.itw updates.iontorrent.com )
    # See if we can look up the server in question.
    execute_process( COMMAND host -W 2 ${SERVER}
       RESULT_VARIABLE NOT_FOUND OUTPUT_QUIET ERROR_QUIET )

    # If we can find it, great! We're done!
    if ( NOT ${NOT_FOUND} )
       set( ION_UPDATE_SERVER ${SERVER} )
       break()
    endif()
endforeach()

# If we find a server, let everyone know.
if (ION_UPDATE_SERVER)
    message(STATUS "Using ION_UPDATE_SERVER: ${ION_UPDATE_SERVER}")
else()
    message(WARNING "Could not find a valid ION_UPDATE_SERVER.")
endif()

include(ExternalProject)

find_program(LSB_RELEASE_COMMAND lsb_release)
if(LSB_RELEASE_COMMAND)
    execute_process(COMMAND ${LSB_RELEASE_COMMAND} -s -c
        OUTPUT_VARIABLE TMP_LSB_RELEASE_CODENAME
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(TOLOWER ${TMP_LSB_RELEASE_CODENAME} LSB_RELEASE_CODENAME)
    message(STATUS "LSB release codename: ${LSB_RELEASE_CODENAME}")
endif(LSB_RELEASE_COMMAND)

option(ION_USE_SYSTEM_SAMTOOLS "Use samtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_SAMTOOLS)

option(ION_USE_SYSTEM_BAMTOOLS "Use bamtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_BAMTOOLS)

if (${LSB_RELEASE_CODENAME} STREQUAL "sid" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "stretch" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "jessie" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "core" OR # CentOS Linux release 7.2.1511 (Core)
    ${LSB_RELEASE_CODENAME} STREQUAL "xenial" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "vivid" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "trusty" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "bionic")
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" ON)
else()
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" OFF)
endif()
mark_as_advanced(ION_USE_SYSTEM_HDF5)

option(ION_USE_SYSTEM_EIGEN "Use EIGEN system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_EIGEN)

option(ION_USE_SYSTEM_BOOST "Use boost system libraries" ON)
mark_as_advanced(ION_USE_SYSTEM_BOOST)

option(ION_USE_SYSTEM_PICARD "Use picard system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_PICARD)

if(NOT ION_USE_SYSTEM_HDF5)
  set(proj_name "hdf5")
  set(proj_version "1.8.11")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/hdf5-1.8.11.tar.gz"
#    URL_MD5 1196e668f5592bfb50d1de162eb16cff
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/../${proj_name_version}/configure
    --with-pic=yes --disable-shared --with-pthread --enable-threadsafe
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_HDF5_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5.a")
  set(ION_HDF5_HL_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5_hl.a")
else()
  add_custom_target(hdf5_proj)
  set(HDF5_USE_STATIC_LIBRARIES True)
  find_package(HDF5 REQUIRED)
  if (${LSB_RELEASE_CODENAME} STREQUAL "trusty" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "bionic" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "vivid" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "xenial")
    set(ION_HDF5_LIBS "hdf5;${HDF5_LIBRARIES}")
  else()
    set(ION_HDF5_LIBS "${HDF5_LIBRARIES}")
  endif()
  if (${LSB_RELEASE_CODENAME} STREQUAL "vivid" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "xenial")
    link_directories("/usr/lib/x86_64-linux-gnu/hdf5/serial/")
  endif()
  message(STATUS "ION_HDF5_LIBS: ${ION_HDF5_LIBS}")
  include_directories("${HDF5_INCLUDE_DIRS}")
  message(STATUS "HDF5_INCLUDE_DIRS: ${HDF5_INCLUDE_DIRS}")
endif()


if(NOT ION_USE_SYSTEM_BOOST)
  set(proj_name "boost")
  set(proj_version "1.59.0")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz"
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    #BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    UPDATE_COMMAND ""
    CONFIGURE_COMMAND ./bootstrap.sh
    BUILD_IN_SOURCE 1
    BUILD_COMMAND     ./bjam install
    --build-dir=${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    --with-serialization
    INSTALL_COMMAND ""
    )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_BOOST_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libboost_serialization.a")
else()
  add_custom_target(boost_proj)

  set(Boost_USE_STATIC_LIBS ON)
#  set(Boost_USE_MULTITHREADED ON)
#  unset(Boost_INCLUDE_DIR CACHE)
#  unset(Boost_LIBRARY_DIRS CACHE)
  find_package(Boost REQUIRED COMPONENTS serialization )
  set(ION_BOOST_LIBS ${Boost_LIBRARIES})

#  find_package(Boost REQUIRED)
#  set(ION_BOOST_LIBS "boost_serialization.a")

  message(STATUS "ION_BOOST_LIBS: ${ION_BOOST_LIBS}")
  include_directories(${Boost_INCLUDE_DIRS})
endif()

# uncomment for profiling if gprofile installed
# add_library(PROFILE STATIC IMPORTED)
# set_property(TARGET PROFILE PROPERTY IMPORTED_LOCATION "/usr/local/lib/libprofiler.a")

include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../external/jsoncpp-src-amalgated0.6.0-rc1")


# wget https://github.com/samtools/htslib/archive/1.2.1.tar.gz
# md5sum : 81f5f1aa17a188a6b6250ca67d83384d
# tar xvzf 1.2.1.tar.gz
# tar cvzf htslib-1.2.1.tar.gz htslib-1.2.1
# md5sum : 028c9110bd80d40e13dbd8270ee7eb2b
if(NOT ION_USE_SYSTEM_HTSLIB)
  set(proj_name "htslib")
  set(proj_version "1.2.1+ion0")
  set(proj_name_version "${proj_name}-${proj_version}")
  set(GCC_OPTIONS -g
                  -O2
  )
  # Convert the list of flags to a space-delimited string
  FOREACH( ITEM ${GCC_OPTIONS})
    SET( CFLAGS "${CFLAGS} ${ITEM}" )
  ENDFOREACH()
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/htslib-1.2.1.tar.gz"
    #URL_MD5 028c9110bd80d40e13dbd8270ee7eb2b
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    #BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make CFLAGS=${CFLAGS}
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/htslib-1.2+ion0.patch"
  )
  set(ION_HTSLIB_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}/libhts.a")
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
else()
  set(ION_HTSLIB_LIBS "hts")
endif()


# wget https://github.com/samtools/samtools/archive/1.2.tar.gz
# md5sum 2748356ef392c0694ca1142de37cf2aa
# tar xvzf 1.2.tar.gz
# tar cvzf samtools-1.2.tar.gz samtools-1.2
# md5sum f94f6ea20f5d581459f90daa39020a60
if (NOT ION_USE_SYSTEM_SAMTOOLS)
  set(proj_name "samtools")
  set(proj_version "1.2+ion2")
  set(proj_name_version "${proj_name}-${proj_version}")
  set(GCC_OPTIONS -g
                  -O2
  )
  # Convert the list of flags to a space-delimited string
  FOREACH( ITEM ${GCC_OPTIONS})
    SET( CFLAGS "${CFLAGS} ${ITEM}" )
  ENDFOREACH()
  ExternalProject_add(${proj_name}
    DEPENDS htslib_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/samtools-1.2.tar.gz"
    #URL_MD5 f94f6ea20f5d581459f90daa39020a60
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make CFLAGS=${CFLAGS}
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/samtools-1.2+ion2.patch"
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
  set(ION_SAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}/libbam.a")
else()
    set(ION_SAMTOOLS_LIBS libbam.a)
    include_directories("/usr/include/samtools")
endif()


if (NOT ION_USE_SYSTEM_PICARD)
  set(proj_name "picard")
  set(proj_version "1.130")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/picard-tools-1.130.tar.gz"
    #URL_MD5
    # in source build
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}"
    #BINARY_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}-build"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
  )
endif()


if (NOT ION_USE_SYSTEM_BAMTOOLS)
    set(proj_name "bamtools")
    set(revision_tag 15eadb925f)#set date below accordingly
    set(proj_version "2.4.0.20150702+git${revision_tag}")
    set(proj_name_version "${proj_name}-${proj_version}")
    set(GCC_OPTIONS -Wno-sign-compare
                    -Wno-misleading-indentation
                    -Wno-unused-but-set-variable
                    -Wno-unused-result
    )
    # Convert the list of flags to a space-delimited string
    FOREACH( ITEM ${GCC_OPTIONS})
      SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ITEM}" )
      SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${ITEM}" )
    ENDFOREACH()

    ExternalProject_add(${proj_name}
      URL "http://${ION_UPDATE_SERVER}/updates/software/external/bamtools-2.4.0.20150702+git15eadb925f.tar.gz"
      #  GIT_REPOSITORY "https://github.com/iontorrent/bamtools.git"
      #  GIT_TAG ${revision_tag}
      PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
      SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
      BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
      CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
        -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
      PATCH_COMMAND patch -p0 -t -N -l < "${ION_TS_EXTERNAL}/bamtools.cxx11.patch"
    )
    include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include/bamtools")
    set(ION_BAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/bamtools/libbamtools.a")
else()
    set(ION_BAMTOOLS_LIBS libbamtools.a)
    include_directories("/usr/include/bamtools")
endif()




